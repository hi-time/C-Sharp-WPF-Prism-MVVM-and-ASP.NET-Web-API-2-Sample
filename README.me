C# WPF Application(Prism, MVVM pattern) + ASP.NET Web API 2, RESTful design, Sample project of 3-tier client server system.

C# WPFアプリケーション(Prism, MVVM パターン) + ASP.NET Web API 2, RESTful設計　の
3層クライアントサーバシステムのサンプルプロジェクトです。

WPFアプリケーション(Prism MVVM)のViewModelから、HttpClientでHTTP通信(JSON形式のデータ)を利用して、
ASP.NET Web API 2のコントローラーを実行します。RESTfulなサービスを提供する構成となっています。
Visual Studio Express 2012(C#5.0)で実行可能です。
------------------------------------------------------------------------------------------------------------
　　Model　　　　　　　　　　　　　　　　　　　Model
　　 ｜　　　　　　　　　　　　　　　　　　　　 ｜　　　　　 ORM
　　ViewModel　　<->　　http(JSON形式)　　<->　Controller　　<->　　Database
　　 ｜
　　View

1.プレゼンテーション層　　　　　　　　　　　2.ファンクション層　　　　3.データ層
　　(クライアント)　　　　　　　　　　　　　　(サーバー)　　　　　　　(サーバー)
-------------------------------------------------------------------------------------------------------------

サンプルプログラム自体は、マスタデータを取得・追加・更新・削除するシンプルな構成となっています。
実際のシステム開発現場では単純なマスタデータの更新処理だけではありませんが、
このサンプルプログラムを利用して応用して作成していくことはできると思います。


【アプリケーション仕様】
1)　クライアント
言語・アプリケーション　：　C#、WPFアプリケーション (Visual Studio Express 2012 for Windows Desktop)
主要パッケージ　　　　　：　Prism 6 (6.2), Prism 6 for Wpf (6.2), Unity for Prism 6 (6.2), Unity (4.0.1)
　　　　　　　　　　　　　　CommonServiceLocator (1.3)
　　　　　　　　　　　　　　Microsoft ASP.NET Web API 2.2 Client Libraries (5.2.6), Json.NET (9.0.1)

2.3)　サーバー
言語・アプリケーション　：　C#、ASP.NET Web API 2(Visual Studio Express 2012 for Web)
データベース　　　　　　：　SQL Server Express 2012
主要パッケージ　　　　　：　Microsoft ASP.NET Web API 2.2 関係 (5.2.6), Json.NET (9.0.1)
　　　　　　　　　　　　　　ADO.NET Entity Framework (6.2)

※それぞれ2012版　に限定しているのは、オフラインインストールできる最新バージョンが2012までのため


【WPFアプリケーションのPrismで利用している主な機能】
MVVMの補助機能
ViewModel→Viewへのエラー通知機能(BindableBaseを継承したAddBindableBaseに追加)
Region + Navigation(画面遷移)
Delegate command(デリゲートコマンド)
Notification, Confirmation(ダイアログ)

サンプルソースのWPFアプリケーションで使用しているPrismにより、
Prismを利用したことがない人でも、基本的な利用を始めやすいと思います。


【ASP.NET Web API 2 with Entity Framework】
Microsoft公式ドキュメント「Entity Framework 6 で Web API 2 を使用」にある、サンプルコードに準じたものです。
また、認証処理ではForms認証を利用してます。
(WPFアプリケーション画面でログイン要求　→　ASP.NET Web API 2のAuthControllerで認証、レスポンスから、ユーザー名と権限IDをWPF側のMainWindowViewModelに格納。)
ASP.NET Web API 2で作成したModel(Poco Model)を、WPFアプリケーション側のModel(Poco Model)にコピーしてます。


【実行方法】
1、SQL Server Express 2012で好きな名前のデータベースを作成する。
　　※EntityFrameworkでORMを使用してしますのでデータベース種類は問わないかもしれません。(Oracle, PostgreSQL, ...)

2、Visual Studio Express 2012 for WebでASP.NET Web API 2のソリューションを起動して、
　　データベース接続方法を設定する。 
　　上記で作成したデータベースへテスト接続OKのこと。
   パッケージマネージャのコンソールでEntityFrameworkで、マイグレーション有効化、追加、データベースアップデートを実行してください。

3、SQL Server Management Studioで適当なデータを入力してください。2つのテーブルがありますので、それぞれ1行追加でOKです。
　M_Authorities　→ M‗Members の順に追加します。
　※そのうちテストデータを用意するかもしれません。

4、Visual Studio Express 2012 for Web　で開発用サーバーを指定してますので、
　　そのままプログラムを実行して下さい。

5、Visual Studio Express 2012 for Windows Desktopのソリューションを起動して、
　　プログラム実行するとログイン画面が表示されます。



【サンプルプログラムの既存の問題】
・ログインパスワード暗号化とSSL化(HTTPS利用)しておきたい。
・ログイン要求で入手したMemberName、AuthorityIDの格納場所は、MainWindowViewModelのstaticプロパティで良いのか？
・httpサーバーのアドレスを、MainWindowViewModelのコンストラクタ内にベタ書きしてるのでどこに置けば良いか。

